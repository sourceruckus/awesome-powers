#!/usr/bin/env python
# -*- mode: python -*-

"""
flac2ogg

this program uses flac, metaflac and oggenc to generate ogg vorbis files from
flac files in a specified directory.


usage: mpeg2ogg [OPTIONS] [DIR]

  --tag-hint=[FORMAT] Specify a mapping of tagfields to strings in the mpeg
                      file's filename.

  --artist=[ARTIST]   Specify the value of the artist tag in the ogg file.
  
  --genre=[genre]     Specify the value of the genre tag in the ogg file.
  
  --date=[DATE]       Specify the value of the date tag in the ogg file.
  
  --album=[ALBUM]     Specify the value of the album tag in the ogg file.
  
  --track=[NUMBER]    Specify the value of the tracknumber tag in the ogg file.

  ex: flac2ogg --genre=industrial flacdir
"""

import os.path
import getopt
import subprocess
import sys
import types


def usage(message=None):
    """
    displays the usage message (program's doc string) along with an optional
    error message.
    """
    if message:
        print "error: %s" % message
    print __doc__.strip()


#------------------------------ main program ------------------------------#

# parse arguments
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], '', ['tag-hint=',
                                                      'artist=',
                                                      'genre=',
                                                      'date=',
                                                      'album=',
                                                      'track='])

    tag_hint = None
    tag_map = {}
    oggdir = None
    
    for flag, arg in opts:
        if flag == "--tag-hint":
            tag_hint = arg
        elif flag == "--artist":
            tag_map['artist'] = arg
        elif flag == "--genre":
            tag_map['genre'] = arg
        elif flag == "--date":
            tag_map['date'] = arg
        elif flag == "--album":
            tag_map['album'] = arg
        elif flag == "--track":
            tag_map['tracknumber'] = arg
    
    if len(args) != 1:
        raise Exception("invalid usage")
    
except Exception, e:
    usage(e)
    sys.exit(1)

flacdir = args[0]

if not oggdir:
    oggdir = "%s.ogg" % flacdir.lower()

print "tag_hint:", tag_hint
print "tag_map:", tag_map
print "flacdir:", flacdir
print "oggdir:", oggdir

# ok, go
try:
    
    for node, dirs, files in os.walk(flacdir):
        for x in files:
            flacfile = os.path.join(node, x)
            basename = flacfile.split("%s%s" % (flacdir, os.path.sep))[1]
            temp = basename.split('.')[-1].lower()
            if temp == 'flac':
                basename = '.'.join(basename.split('.')[:-1])
            oggfile = os.path.join(oggdir, "%s.ogg" % basename).lower()

            # create tag map
            map = {}
            if tag_hint:
                # try to guess tag values using tag_hint
                hint = tag_hint.split(' - ')
                temp = basename.split(' - ')
                if len(hint) != len(temp):
                    err = "tag_hint mismatch: %s : %s" % (tag_hint, basename)
                    raise Exception(err)
                for i in range(len(hint)):
                    map[hint[i]] = temp[i].lower()
            else:
                # some flac files have comments in them
                go= ["metaflac", "--export-tags-to=-", flacfile]
                p = subprocess.Popen(go, stdout=subprocess.PIPE)
                out = p.communicate()[0].strip().split('\n')
                for x in out:
                    x = x.lower().split("=")
                    map[x[0].strip()] = x[1].strip()
                try:
                    map['track'] = map['tracknumber']
                except:
                    pass
                # zero-pad track
                try:
                    map['track'] = map['track'].rjust(2, '0')
                except:
                    pass
                    
            # command line overrides
            for x in tag_map:
                map[x] = tag_map[x].lower()
            print map
            
            # flac2ogg
            if 'track' in map and 'title' in map:
                oggfile = os.path.join(oggdir, "%s - %s.ogg" % (map['track'], map['title']))
            print "converting '%s' to '%s'" % (flacfile, oggfile)
            if not os.path.isdir(oggdir):
                os.makedirs(oggdir)
            go = "flac --decode --stdout '%s' | oggenc -q 6" % flacfile
            try:
                go += " -a '%s'" % map['artist']
            except:
                pass
            try:
                go += " -G '%s'" % map['genre']
            except:
                pass
            try:
                go += " -d '%s'" % map['date']
            except:
                pass
            try:
                go += " -N '%s'" % map['track']
            except:
                pass
            try:
                go += " -t '%s'" % map['title']
            except:
                pass
            try:
                go += " -l '%s'" % map['album']
            except:
                pass
            go += " -o '%s' -" % oggfile
            print go
            subprocess.check_call(go, shell=True)
            
        for x in dirs:
            print "dir:", x
    
except Exception, e:
    print "ERROR: %s" % e
    sys.exit(-1)

sys.exit(0)
