#!/bin/bash
#
# Awesome Powers - scripts & config files of pure awesomeness
#
# Copyright 2018-2024 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# Intended to be called periodically (every 10-15 seconds or so, perhaps once a
# minute) to validate the system's default gateway or replace it with an
# alternate one that is working.
#
# NOTE: All output appended to logfile, which is then mailed and removed each
#       night (log rotation and mailing is not this script's responsibility).
#
# FIXME: Perhaps add ability to count failures so we can only switch gw if 2 or
#        3 cycles of fail have happened.  To avoid flipping back and forth
#        between two crappy WAN interfaces.  Not sure I would really want to
#        continue using a known bad WAN interface... so perhaps not?
#
#        I guess if we do this, we should also count successes before switching
#        to a gw.  So, require N consecutive successfull pingenator tests
#        before enabling a gateway.
#
# FIXME: Add config for controlling pingenator's --success parameter, in case
#        "any response" isn't a good success indicator.
#


log=$0.log
lock=$0.lock
state=$0.state


# debug echo - only prints if enabled
decho()
{
    if [ -n "$opt_verbose" ]; then
        echo "$*"
    fi
}


# dry-run eval - evals unless dry-run specified
deval()
{
    if [ -z "$opt_dryrun" ]; then
        eval $*
    fi
}


iface_get_routes()
{
    # try manual gateway
    gw=$(nmcli con show $1 2>/dev/null |awk '/^IP4.GATEWAY/ {print $NF}')
    if [ "$gw" = "" -o "$gw" = "--" ]; then
        # try DHCP otpions
        gw=$(nmcli con show $1 2>/dev/null |awk '/^DHCP4.OPTION[[:print:]]* routers =/ {print $NF}')
    fi

    # if we got a gateway, we need to format it as a route by adding 0.0.0.0/0
    # in front
    if [ -n "$gw" ]; then
        gw="0.0.0.0/0 $gw"
    fi
    gw=($gw)

    # now check for additional routes, first manually configured ones, then
    # dhcp
    #
    # FIXME: definately room for improvement in the parsing here...  we're
    #        assuming the field numbers of the IPs we want are $4 and $7.
    #        we're also assuming that the first pair is 'network' '0.0.0.0/0',
    #        which we don't want to add.
    #
    # FIXME: shoot, the IP4.ROUTE stuff is only for the active
    #        configuration... in other words, if the interface is fully
    #        activated, but we've manually removed the route, this gets
    #        nothing...  we should be looking at ipv4.gateway and ipv4.routes
    #        instead, i guess
    #
    routes=($(nmcli con show $1 2>/dev/null |awk '/^IP4.ROUTE\[[^1]/ {print $4 $7}' | tr ',' ' '))
    # FIXME: actually, i haven't run into a situation yet where DHCP is
    #        providing additional static routes.  It can as dhcp option 121,
    #        but i'd have to configure a DHCP server to do that to test
    #        parsing.... should show up as 'classless-static-route', but i'm
    #        not sure how nmcli displays it (e.g., single line w/ commas,
    #        single line w/ spaces, multiple lines?)

    # don't duplicte default gw if it shows up both as gw and a static route
    #
    # NOTE: We're assuming that if the gw is listed as a static route, it's the
    #       frist one.
    #
    
    if [ "${gw[0]}" != "${routes[0]}" ] && [ "${gw[1]}" != "${routes[1]}" ]; then
        echo ${gw[@]} ${routes[@]}
    else
        echo ${routes[@]}
    fi
}


iface_get_state()
{
    nmcli con show $1 2>/dev/null |awk '/^GENERAL.STATE/ {print $NF}'
}


iface_get_devname()
{
    # FIXME: I originally was using GENERAL.IP-IFACE here, which sounds more
    #        likely to always be correct than GENERAL.DEVICES... but it looks
    #        like Ubuntu 18.04's version of NetworkManager doesn't expose
    #        IP-IFACE.  Eventually switch over, or maybe use IP-IFACE if
    #        non-empty otherwise DEVICES?
    #
    nmcli con show $1 2>/dev/null |awk '/^GENERAL.DEVICES/ {print $NF}'
}


ip_is_reachable()
{
    # FIXME: need to make this better.  i'm seing quite a bit of
    #        single-packet-test failures from otherwise functional
    #        gateways... I suppose I should have seen that coming.
    #
    #        for now, we skip this test and just pound the gateway with
    #        ip_is_good_gw().  if that proves not-good-enough for some reason,
    #        maybe make this call pingenator with the specified ip listed 4
    #        times (so it pings 1 packet 4 times in parallel).
    #
    ping -w1 -c1 $1 >/dev/null 2>&1
}


# check to see if ip is a good gateway candidate.  pingenator will temporarily
# use the ip as a gateway to ping a couple hosts to see if it REALLY works.
#
# NOTE: Pingenator will return success if it gets ANY responses.  We can tune
#       that w/ --success PERCENT if needed, but for now that's fine.
#
ip_is_good_gw()
{
    go="$pingenator -g $1 --dns"
    for x in $pingenator_excludes; do
        go+=" --exclude $x"
    done
    decho $go
    # NOTE: I initially considered not calling pingenator if --dry-run, because
    #       it makes routing table changes and that could be unexpected, but it
    #       makes running this as --dry-run pretty useless as it completely
    #       eliminates the interface testing...  After doing a lot of testing,
    #       I eventually decided to let pingenator do it's thing even if
    #       --dry-run.
    if [ -n "$opt_verbose" ]; then
        eval $go
    else
        # be silent unless --verbose
        eval $go >/dev/null 2>&1
    fi
}


timestamp()
{
    date -Iseconds
}


iface_remove_routes()
{
    local iface
    local dev
    local v
    local routes
    local r
    local i
    local go

    iface=$1

    # get the device name
    dev=$(iface_get_devname $iface)
    decho "looking up routes provided by $iface ($dev)"
    
    # figure out routes, first from manual config, then from nm info
    v=${iface}_routes
    routes=$(echo ${!v} | tr ',' ' ')
    [ -z "$routes" ] && routes=$(iface_get_routes $iface)
    if [ -z "$routes" ]; then
        return
    fi

    decho $routes
    r=($(echo $routes | tr ',' '\n'))
    for ((i=0; i<${#r[@]}; i+=2)); do
        #decho ip route show ${r[i]} via ${r[i+1]} dev $dev
        if [ -n "$(ip route show ${r[i]} via ${r[i+1]} dev $dev)" ]; then
            go="ip route del ${r[i]} via ${r[i+1]} dev $dev"
            echo $(timestamp): $go
            deval $go
        fi
    done
}


remove_all_managed_routes()
{
    # make sure this only removes things a single time
    #
    # FIXME: This was a holdover from when we could specify "dependent ifaces",
    #        which would result in some recursion... pretty sure we can remove
    #        it.
    #
    [ -n "$NO_MORE_REMOVING" ] && return
    local iface
    local dev
    local v
    local routes
    local r
    local i
    local go
    for iface in $*; do
        iface_remove_routes $iface
    done
    export NO_MORE_REMOVING=y
}


check_ifaces()
{
    good_ifaces=
    for iface in $*; do
        decho checking iface: $iface
        
        # check iface state, raise if needed
        #
        # NOTE: We originally skipped lowered interfaces, but if our connection
        #       goes down (e.g., the 4gmodem I ese does this when
        #       "carrier-changed" happens, and it's kinda frequent), we need to
        #       re-raise it.
        #
        #       This means, any interface listed WILL get raised, so make sure
        #       to remove dead interfaces that shouldn't be auto-raised.
        #
        # NOTE: I considered making these decho calls non-verbose echos, but an
        #       interface that refuses to raise (or that raises but then fails
        #       to work and gets lowered) causes us to spam the logs every
        #       single run.
        #
        if [ "$(iface_get_state $iface)" != "activated" ]; then
            if [ -n "$opt_dryrun" ]; then
                decho "$(timestamp): Skipping inactive interface $iface during --dry-run"
                continue
            else
                decho "$(timestamp): Raising inactive interface $iface"
                nmcli con up $iface >/dev/null 2>&1
            fi
        fi

        # get the device name
        dev=$(iface_get_devname $iface)
        decho dev: $dev
        eval ${iface}_dev=$dev
        
        # figure out routes, first from manual config, then from nm info
        v=${iface}_routes
        routes=$(echo ${!v} | tr ',' ' ')
        if [ -z "$routes" ]; then
            routes=$(iface_get_routes $iface)
            eval ${iface}_routes=\"$routes\"
        fi
        if [ -z "$routes" ]; then
            # NOTE: This `routes` check failing, at least for my setup, is
            #       really implying that the interface didn't raise
            #       successfully.  Even if that's occasionally an
            #       overstatement, it still means the interface is unusable as
            #       a gateway, so we treat that as failure and lower the
            #       interface.
            #
            # FIXME: Actually, in some cases, it means I have to log in and
            #        restart the NetworkManager service...  In old versions (I
            #        think circa Bionic Beaver), NetworkManager can get all
            #        munged up, and magically fixes itself on service restart.
            #        The error message specifically is "Error: Connection
            #        activation failed: Connection 'vlan3' is not available on
            #        the device eth0.3 at this time."
            #
            if [ -n "$opt_dryrun" ]; then
                decho "$(timestamp): No routes for $iface, not lowering because --dry-run"
            else
                decho "$(timestamp): No routes for $iface, lowering"
                nmcli con down $iface >/dev/null 2>&1
            fi
            continue
        else
            decho "routes: $routes"
        fi
        
        # FIXME: What to do if there's more than one route... they should be listed
        #        in pairs of `target` `gateway`... should we only add the routes if
        #        they're ALL available?
        #
        #        In reality, all the use cases I've run into involve a single ip
        #        being added as a route to multiple subnets... so we could just
        #        check the first one.  If we do check subsequent ones, we should
        #        doulbe check that it's actually a different IP so we don't waste
        #        time pinging the same IP over and over.
        #
        #        Fow now, just take the 1st ip, which should be the 2nd item in
        #        routes
        #
        r=($(echo $routes | tr ',' '\n'))
        decho checking ${r[1]}

        # skip if not actually a usable gateway
        #
        # NOTE: We lower failed interfaces here so that subsequent runs will
        #       attempt to re-raise them, hopefully returning functionality of
        #       our preferred WAN interface automatically in case of a
        #       temporary outage.
        #
        if ! ip_is_good_gw ${r[1]}; then
            eval ${iface}_is_good=
            if [ -n "$opt_dryrun" ]; then
                decho "$(timestamp): Interface $iface is not a good gateway, not lowering because --dry-run"
            else
                decho "$(timestamp): Interface $iface is not a good gateway, lowering"
                nmcli con down $iface >/dev/null 2>&1
            fi
            continue
        fi

        # it's good
        eval ${iface}_is_good=yes
        good_ifaces+=" $iface"

    done
}


review_ifaces()
{
    decho ifaces: $*
    decho good_ifaces: $good_ifaces

    send_alert=
    for iface in $*; do
        decho iface: $iface
        is_good_k=${iface}_is_good
        is_good=${!is_good_k}
        decho is_good: $is_good
        was_good_k=${iface}_was_good
        was_good=${!was_good_k}
        decho was_good: $was_good
        if [ -n "$was_good" -a -z "$is_good" ]; then
            echo $(timestamp): interface $iface was good previously, but is now bad
            send_alert=y
        elif [ -n "$is_good" -a -z "$was_good" ]; then
            echo $(timestamp): interface $iface was bad previously, but is now good
            send_alert=y
        fi
    done
}


set_gw()
{
    # we appended good interfaces in the order of preference specified in the
    # config file, so the most preferable good gateway interface is the first
    # one. conventient.
    good_iface_list=($good_ifaces)
    iface=${good_iface_list[0]}
    decho "best iface: $iface"

    # look up all the variables for the "best" interface
    dev_k=${iface}_dev
    dev=${!dev_k}
    routes_k=${iface}_routes
    routes=(${!routes_k})
    decho "dev=$dev, routes=${routes[*]}"
    gw_cur=${routes[1]}

    # check if the route is already there
    #
    # NOTE: it doesn't hurt to add it a second time, but we want the
    #       output of this script to be silent if nothing needed to be
    #       changed.
    #
    decho "interface $iface is the best gateway, processing routes"
    # FIXME: This is parsing over a list of routes (specified as pairs of
    #        "network gw"), but has really only been tested when there's a
    #        single route specified.  In other words, it probably doesn't work
    #        if an interface provides multiple routes
    #
    # FIXME: instead of this check, should we just believe our status variables
    #        (e.g. gw_prev)?
    #
    for ((i=0; i<${#routes[@]}; i+=2)); do
        #echo ip route show ${routes[i]} via ${routes[i+1]} dev $dev
        #blarg=$(ip route show ${routes[i]} via ${routes[i+1]} dev $dev)
        #echo blarg: $blarg
        if [ -z "$(ip route show ${routes[i]} via ${routes[i+1]} dev $dev)" ]; then
            # we're really modifying the routing table, clear out all
            # managed routes first
            gw_modified=y
            remove_all_managed_routes $iface_list
            go="ip route add ${routes[i]} via ${routes[i+1]} dev $dev"
            echo $(timestamp): $go
            deval $go
        fi
    done

    # check for changed public ip address
    #
    # NOTE: This can happen even if we haven't changed our actual gw here,
    #       if the gw has gotten a new public IP from the ISP for example.
    #       This happens quite frequently with 4G and StarLink.
    #
    # NOTE: `ip_cur` gets stored as `ip_prev` in our state file on exit,
    #       and parsed at startup, so `ip_prev` should already be set (or
    #       empty if this is the first ever run).
    #
    # FIXME: Hm... I have twice now (in less then 4 hours of testing) seen
    #        the Netgear 4g modem go crazy with public ip changing every
    #        single run until I connect via TeamViewer to make a lot of
    #        traffic.  Maybe emailing every time is a bad idea?
    #
    # FIXME: Yeah, the Peplink one does it, too.  Just constantly changing
    #        IP every single time I check.  I believe this is normal, and
    #        the carrier isn't actually even assigning us in IP until there
    #        is traffic.  If I log in via TeamViewer and start doing
    #        bandwidth tests the IP stabilizes... until a few minutes after
    #        I stop.  At least for now, I'm not going to have this trigger
    #        an alert email.  Relying on ssh access via a known 4g IP is
    #        clearly not only a bad idea, it's going to prove to be
    #        impossible.
    #
    decho "checking $iface's public ip"
    ip_cur=$(host myip.opendns.com resolver1.opendns.com | awk '/^myip.opendns.com/ {print $NF}')
    if [ "$ip_cur" != "$ip_prev" ]; then
        echo "$(timestamp): New public IP detected! Was $ip_prev, now $ip_cur"
        # set gw_modified so we get alerts
        #
        # NOTE: Nope, see FIXMEs above.
        #
        #gw_modified=y
    fi
}


write_state()
{
    # if these have been set, update the "previous" variables.  otherwise, just
    # leave the old previous values in place.
    [ -n "$gw_cur" ] && gw_prev=$gw_cur
    [ -n "$ip_cur" ] && ip_prev=$ip_cur

    cat > $state <<EOF
gw_prev=$gw_prev
ip_prev=$ip_prev
EOF
    for iface in $iface_list; do
        k_is_good=${iface}_is_good
        v_is_good=${!k_is_good}
        cat >> $state <<EOF
${iface}_was_good=$v_is_good
EOF
    done
}


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "usage: $(basename $0) OPTIONS"
    echo
    echo "  -h, --help                Show this help message and exit."
    echo
    echo "  -v, --verbose             Be verbose.  Default is silent unless routes need"
    echo "                            to be modified."
    echo
    echo "  -n, --dry-run             Don't actually change anything, just print what"
    echo "                            would be done."
    echo
    echo "  -s, --stdout              Log to stdout instead of the logfile.  Can't be used"
    echo "                            w/ --mail."
    echo
    echo "  -m, --mail EMAILADDRESS   Email the logfile to EMAILADDRESS if the gateway is"
    echo "                            modified.  Can't be used w/ --stdout."
    echo
    echo "By default, output is appended to $log and is silent unless"
    echo "something changes.  If --mail specified, the logfile is also emailed to"
    echo "EMAILADDRESS, but only if somthing is changed."
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $0 \
    -o hvnsm: \
    --long help,verbose,dry-run,stdout,mail: -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts


opt_dryrun=
opt_verbose=
opt_stdout=
opt_mail=
# parse the new positional arguments
while true; do
    case "$1" in
        -v|--verbose)
            opt_verbose=y
            shift 1
            ;;
        -n|--dry-run)
            opt_dryrun=y
            shift 1
            ;;
        -s|--stdout)
            opt_stdout=y
            opt_mail=
            shift 1
            ;;
        -m|--mail)
            opt_mail=$2
            opt_stdout=
            shift 2
            ;;
        --)
            # done parsing
            shift
            break
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done


# redirect all output to the logfile
if [ -z "$opt_stdout" ]; then
    exec 1>>$log
    exec 2>&1
fi

# parse our config
if [ -f $0.conf ]; then
    . $0.conf
else
    echo "ERROR: missing config file $0.conf"
    exit 1
fi

# quick sanity check
if [ -z "$iface_list" ]; then
    echo "ERROR: iface_list not set"
    exit 1
fi
decho "iface_list: $iface_list"

# figure out path to pingenator
pingenator=$(which pingenator)
if [ ! -f $pingenator ]; then
    echo "ERROR: $pingenator not found"
    exit 1
fi
decho "pingenator: $pingenator"

# lock the lockfile!
#
# NOTE: This means if anything fails after this, we need to decide if we're
#       going to remove the lockfile when things go wrong.
#
go="touch $lock"
decho $go
deval $go

# parse the state file, if present
if [ -f $state ]; then
    . $state
fi
# register at-exit func to update state file IF NOT DRYRUN
deval trap write_state EXIT

gw_modified=
check_ifaces $iface_list
review_ifaces $iface_list
set_gw

# If we actually changed something, mail results (if configured)
if [ -n "$gw_modified" -a -n "$opt_mail" ]; then
    mail -s "$(basename $0): $(hostname) gateway modified" $opt_mail -E 'set nonullbodymsg' --content-type=text/plain -A $log </dev/null
elif [ -n "$send_alert" -a -n "$opt_mail" ]; then
    mail -s "$(basename $0): $(hostname) alert" $opt_mail -E 'set nonullbodymsg' --content-type=text/plain -A $log </dev/null
fi

go="rm -f $lock"
decho $go
deval $go

exit 0
