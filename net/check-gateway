#!/bin/bash
#
# Awesome Powers - scripts & config files of pure awesomeness
#
# Copyright 2018-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# Intended to be called periodically (every 10-15 seconds or so, perhaps once a
# minute) to validate the system's default gateway or replace it with an
# alternate one that is working.
#
# NOTE: All output appended to logfile, which is then mailed and removed each
#       night (log rotation and mailing is not this script's responsibility).
#
# FIXME: Should our goal here be to ensure that we only have a functional
#        gateway?  In other words, should we remove bad gateway even if there's
#        not a good replacement... The only reason NOT to do this, is the
#        occasional blib in connectivity that resolves itself within a couple
#        minutes.  In this case, leaving things alone might be better.  That
#        being said, if this script is getting called at a high frequency
#        (every minute), removing the borky gateway will give better results
#        (e.g., host unreachable instead of timing out) until it's back up.
#


log=$0.log
lock=$0.lock


# debug echo - only prints if enabled
decho()
{
    if [ -n "$opt_verbose" ]; then
        echo "$*"
    fi
}


# dry-run eval - evals unless dry-run specified
deval()
{
    if [ -z "$opt_dryrun" ]; then
        eval $*
    fi
}


iface_get_routes()
{
    # try manual gateway
    gw=$(nmcli con show $1 |awk '/^IP4.GATEWAY/ {print $NF}')
    if [ "$gw" = "" -o "$gw" = "--" ]; then
        # try DHCP otpions
        gw=$(nmcli con show $1 |awk '/^DHCP4.OPTION[[:print:]]* routers =/ {print $NF}')
    fi

    # if we got a gateway, we need to format it as a route by adding 0.0.0.0/0
    # in front
    if [ -n "$gw" ]; then
        gw="0.0.0.0/0 $gw"
    fi
    gw=($gw)

    # now check for additional routes, first manually configured ones, then
    # dhcp
    #
    # FIXME: definately room for improvement in the parsing here...  we're
    #        assuming the field numbers of the IPs we want are $4 and $7.
    #        we're also assuming that the first pair is 'network' '0.0.0.0/0',
    #        which we don't want to add.
    #
    # FIXME: shoot, the IP4.ROUTE stuff is only for the active
    #        configuration... in other words, if the interface is fully
    #        activated, but we've manually removed the route, this gets
    #        nothing...  we should be looking at ipv4.gateway and ipv4.routes
    #        instead, i guess
    #
    routes=($(nmcli con show $1 |awk '/^IP4.ROUTE\[[^1]/ {print $4 $7}' | tr ',' ' '))
    # FIXME: actually, i haven't run into a situation yet where DHCP is
    #        providing additional static routes.  It can as dhcp option 121,
    #        but i'd have to configure a DHCP server to do that to test
    #        parsing.... should show up as 'classless-static-route', but i'm
    #        not sure how nmcli displays it (e.g., single line w/ commas,
    #        single line w/ spaces, multiple lines?)

    # don't duplicte default gw if it shows up both as gw and a static route
    #
    # NOTE: We're assuming that if the gw is listed as a static route, it's the
    #       frist one.
    #
    
    if [ "${gw[0]}" != "${routes[0]}" ] && [ "${gw[1]}" != "${routes[1]}" ]; then
        echo ${gw[@]} ${routes[@]}
    else
        echo ${routes[@]}
    fi
}


iface_get_state()
{
    state=$(nmcli con show $1 |awk '/^GENERAL.STATE/ {print $NF}')
    echo $state
}


iface_get_devname()
{
    # FIXME: I originally was using GENERAL.IP-IFACE here, which sounds more
    #        likely to always be correct than GENERAL.DEVICES... but it looks
    #        like Ubuntu 18.04's version of NetworkManager doesn't expose
    #        IP-IFACE.  Eventually switch over, or maybe use IP-IFACE if
    #        non-empty otherwise DEVICES?
    #
    nmcli con show $1 |awk '/^GENERAL.DEVICES/ {print $NF}'
}


ip_is_reachable()
{
    ping -w1 -c1 $1 >/dev/null 2>&1
}


# check to see if ip is a good gateway candidate.  pingenator will temporarily
# use the ip as a gateway to ping a couple hosts to see if it REALLY works.
ip_is_good_gw()
{
    # FIXME: Should we include pingenator as a submodule of awesome-powers?  If
    #        so, should we use it by default here, add use_pingenator_sumbod
    #        and/or use_pingenator_path or something like that to config file?
    #
    #        I'm going with yes, add it as submodule.  And yes, use it
    #        explicitly based on our checkout location.  If that becomes
    #        undesirable later, we'll add --use-system-pingenator or something
    #        like that.  Probably best to add pingenator_path to conf and use
    #        that if set, or just assume it's in $PATH if that variable is set
    #        to "PATH".  or something.
    #
    go="$pingenator -g $1 --dns"
    for x in $pingenator_excludes; do
        go+=" --exclude $x"
    done
    decho $go
    # NOTE: I initially considered not calling pingenator if --dry-run, because
    #       it makes routing table changes and that could be unexpected, but it
    #       makes running this as --dry-run pretty useless as it completely
    #       eliminates the interface testing...  After doing a lot of testing,
    #       I eventually decided to let pingenator do it's thing even if
    #       --dry-run.
    if [ -n "$opt_verbose" ]; then
        eval $go
    else
        # be silent unless --verbose
        eval $go >/dev/null 2>&1
    fi
}


timestamp()
{
    date -Iseconds
}


iface_remove_routes()
{
    local iface
    local dev
    local v
    local routes
    local r
    local i
    local go

    iface=$1

    # get the device name
    dev=$(iface_get_devname $iface)
    decho "looking up routes provided by $iface ($dev)"
    
    # figure out routes, first from manual config, then from nm info
    v=${iface}_routes
    routes=$(echo ${!v} | tr ',' ' ')
    [ -z "$routes" ] && routes=$(iface_get_routes $iface)
    if [ -z "$routes" ]; then
        return
    fi

    decho $routes
    r=($(echo $routes | tr ',' '\n'))
    for ((i=0; i<${#r[@]}; i+=2)); do
        #decho ip route show ${r[i]} via ${r[i+1]} dev $dev
        if [ -n "$(ip route show ${r[i]} via ${r[i+1]} dev $dev)" ]; then
            go="ip route del ${r[i]} via ${r[i+1]} dev $dev"
            echo $(timestamp): $go
            deval $go
        fi
    done
}


remove_all_managed_routes()
{
    # make sure this only removes things a single time
    [ -n "$NO_MORE_REMOVING" ] && return
    local iface
    local dev
    local v
    local routes
    local r
    local i
    local go
    for iface in $*; do
        iface_remove_routes $iface
        
        # check for dependent ifaces
        v=${iface}_deps
        deps=${!v}
        if [ -n "$deps" ]; then
            decho "$iface deps: $deps"
            remove_all_managed_routes $deps
        fi

    done
    export NO_MORE_REMOVING=y
}


check_ifaces()
{
    for iface in $*; do
        decho checking iface: $iface
        
        # check iface state, raise if needed
        #
        # NOTE: We originally skipped lowered interfaces, but if our connection
        #       goes down (e.g., the 4gmodem I ese does this when
        #       "carrier-changed" happens, and it's kinda frequent), we need to
        #       re-raise it.
        #
        #       This means, any interface listed WILL get raised, so make sure
        #       to remove dead interfaces that shouldn't be auto-raised.
        #
        if [ "$(iface_get_state $iface)" != "activated" ]; then
            if [ -n "$opt_dryrun" ]; then
                decho "skipping inactive interface during --dry-run"
                continue
            else
                decho "raising inactive interface"
                nmcli con up $iface
            fi
        fi

        # get the device name
        dev=$(iface_get_devname $iface)
        decho dev: $dev
        
        # figure out routes, first from manual config, then from nm info
        v=${iface}_routes
        routes=$(echo ${!v} | tr ',' ' ')
        [ -z "$routes" ] && routes=$(iface_get_routes $iface)
        if [ -z "$routes" ]; then
            echo "WARNING: no routes for $iface"
            continue
        else
            decho "routes: $routes"
        fi
        
        # FIXME: What to do if there's more than one route... they should be listed
        #        in pairs of `target` `gateway`... should we only add the routes if
        #        they're ALL available?
        #
        #        In reality, all the use cases I've run into involve a single ip
        #        being added as a route to multiple subnets... so we could just
        #        check the first one.  If we do check subsequent ones, we should
        #        doulbe check that it's actually a different IP so we don't waste
        #        time pinging the same IP over and over.
        #
        #        Fow now, just take the 1st ip, which should be the 2nd item in
        #        routes
        #
        r=($(echo $routes | tr ',' '\n'))
        decho checking ${r[1]}

        # skip if not reachable
        if ! ip_is_reachable ${r[1]}; then
            decho "interface $iface not reachable, skipping"
            continue
        fi

        # skip if not actually a usable gateway
        if ! ip_is_good_gw ${r[1]}; then
            decho "interface $iface not a good gateway, skipping"
            continue
        fi

        # Ok, we've got a winner!
        
        # check if the route is already there
        #
        # NOTE: it doesn't hurt to add it a second time, but we want the
        #       output of this script to be silent if nothing needed to be
        #       changed.
        #
        decho "interface $iface is a usable gateway, processing routes"
        for ((i=0; i<${#r[@]}; i+=2)); do
            #echo ip route show ${r[i]} via ${r[i+1]} dev $dev
            #blarg=$(ip route show ${r[i]} via ${r[i+1]} dev $dev)
            #echo blarg: $blarg
            if [ -z "$(ip route show ${r[i]} via ${r[i+1]} dev $dev)" ]; then
                # we're really modifying the routing table, clear out all
                # managed routes first
                gw_modified=y
                remove_all_managed_routes $*
                go="ip route add ${r[i]} via ${r[i+1]} dev $dev"
                echo $(timestamp): $go
                deval $go
            fi
        done

        # check for dependent ifaces
        v=${iface}_deps
        deps=${!v}
        if [ -n "$deps" ]; then
            decho "$iface deps: $deps"
            check_ifaces $deps
        fi

        break

    done
}


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "usage: $(basename $0) OPTIONS"
    echo
    echo "  -h, --help                Show this help message and exit."
    echo
    echo "  -v, --verbose             Be verbose.  Default is silent unless routes need"
    echo "                            to be modified."
    echo
    echo "  -n, --dry-run             Don't actually change anything, just print what"
    echo "                            would be done."
    echo
    echo "  -s, --stdout              Log to stdout instead of the logfile.  Can't be used"
    echo "                            w/ --mail."
    echo
    echo "  -m, --mail EMAILADDRESS   Email the logfile to EMAILADDRESS if the gateway is"
    echo "                            modified.  Can't be used w/ --stdout."
    echo
    echo "By default, output is appended to $log and is silent unless"
    echo "something changes.  If --mail specified, the logfile is also emailed to"
    echo "EMAILADDRESS, but only if somthing is changed."
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $0 \
    -o hvnsm: \
    --long help,verbose,dry-run,stdout,mail: -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts


opt_dryrun=
opt_verbose=
opt_stdout=
opt_mail=
# parse the new positional arguments
while true; do
    case "$1" in
        -v|--verbose)
            opt_verbose=y
            shift 1
            ;;
        -n|--dry-run)
            opt_dryrun=y
            shift 1
            ;;
        -s|--stdout)
            opt_stdout=y
            opt_mail=
            shift 1
            ;;
        -m|--mail)
            opt_mail=$2
            opt_stdout=
            shift 2
            ;;
        --)
            # done parsing
            shift
            break
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done


# redirect all output to the logfile
if [ -z "$opt_stdout" ]; then
    exec 1>>$log
    exec 2>&1
fi

# parse our config
if [ -f $0.conf ]; then
    . $0.conf
else
    echo "ERROR: missing config file $0.conf"
    exit 1
fi

# quick sanity check
if [ -z "$iface_list" ]; then
    echo "ERROR: iface_list not set"
    exit 1
fi
decho "iface_list: $iface_list"

# figure out path to pingenator
#
# FIXME: as soon as pingenator has an official release, replace this with a
#        check in PATH and get rid of the pingenator submodule
#
pingenator=$(dirname $0)/../subprojects/pingenator/src/pingenator
if [ ! -f $pingenator ]; then
    echo "ERROR: $pingenator not found"
    exit 1
fi
pingenator=$(realpath $pingenator)
decho "pingenator: $pingenator"

# lock the lockfile!
#
# NOTE: This means if anything fails after this, we need to decide if we're
#       going to remove the lockfile when things go wrong.
#
go="touch $lock"
decho $go
deval $go

gw_modified=
check_ifaces $iface_list

# If we actually changed something, mail results (if configured)
if [ -n "$gw_modified" -a -n "$opt_mail" ]; then
    mail -s "$(basename $0): gateway modified" $opt_mail -E 'set nonullbodymsg' --content-type=text/plain -A $log </dev/null
fi

go="rm -f $lock"
decho $go
deval $go

exit 0
