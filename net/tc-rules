#!/bin/bash -x
#
# Awesome Powers - scripts & config files of pure awesomeness
#
# Copyright 2018-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script executes a bunch of tc commands to setup traffic control queues
# for a simple 3 queue system - high, regular, and low priority traffic
#
# This is based on examples from the following links:
#
# https://www.voip-info.org/qos-with-linux-using-prio-and-htb/
# https://wiki.archlinux.org/title/Advanced_traffic_control
# https://lartc.org/lartc.txt
# https://tldp.org/HOWTO/html_single/Traffic-Control-HOWTO/
# http://linux-ip.net/gl/tc-filters/tc-filters.html
# https://wiki.debian.org/TrafficControl
# https://robert.nowotniak.com/security/htb/
#
# I'm basically creating High, Medium, and Low traffic queues to filter traffic
# into for our uplink.  By default, these 3 queues get bandwidth guarantees of
# 20%, 75%, and 5% of our uplink bandwitdh (although lower priority queues get
# to eat unused bandwidth from other queues).  The downlink will just get
# rate-limited to around what our downlink bandwidth speed is.
#
# FIXME: Downlink rate-limiting is broken and commented out...
#
# In addition, we try to optimize a few things to make sure latency stays low
# even as bandwidth usage gets high (e.g., prioritize DNS, TCP ACKs).
#
# You can query queue statistics like this:
#
#   tc -g -s class show dev $DEV
#   tc -s qdisc show dev $DEV
#   tc -s filter show dev $DEV
#
# These variables should be set in the environemnt, or by a wrapper script,
# prior to execution
#
# DEV - the device to be managed (e.g., eth0)
# UP_MBIT - the uplink speed in mbits
# DOWN_MBIT - the downlink speed in mbits
#

# FIXME: should really allow for UP_KBIT or UP_MBIT via config... KVH or crappy
#        4g modems might benefit from that.


# check for required variables
if [ -z "$DEV" ]; then
    echo "DEV not specified"
    exit 1
fi
if [ -z "$UP_MBIT" ]; then
    echo "UP_MBIT not specified"
    exit 1
fi
if [ -z "$DOWN_MBIT" ]; then
    echo "DOWN_MBIT not specified"
    exit 1
fi

# do some math - we need to divide up the bandwidth, which requires us to
# convert from mbit to kbit
#
# FIXME: Should we also knock 5% off the maximum speeds here, to try and play
#        it extra safe?  I'm going with no, for now.
#
UP_KBIT=$((UP_MBIT*1000))
DOWN_KBIT=$((DOWN_MBIT*1000))

# if individual rates not specified, calculate them with sane defaults
if [ -z "$UP_HIGH_GUARANTEED_RATE_KBIT" ]; then
    UP_HIGH_GUARANTEED_RATE_KBIT=$(($UP_KBIT*20/100))
fi
if [ -z "$UP_MEDIUM_GUARANTEED_RATE_KBIT" ]; then
    UP_MEDIUM_GUARANTEED_RATE_KBIT=$(($UP_KBIT*75/100))
fi
if [ -z "$UP_LOW_GUARANTEED_RATE_KBIT" ]; then
    UP_LOW_GUARANTEED_RATE_KBIT=$(($UP_KBIT*5/100))
fi
# NOTE: Regarding burst size, see comment in tc-htb(8): Due to Unix timing
#       constraints, the maximum ceil rate is not infinite and may in fact be
#       quite low. On Intel, there are 100 timer events per second, the maximum
#       rate is that rate at which 'burst' bytes are sent each timer tick.
#       From this, the minimum burst size for a specified rate can be
#       calculated. For i386, a 10mbit rate requires a 12 kilobyte burst as
#       100*12kb*8 equals 10mbit.
#
#       So, to support a maximum rate of 20MBit/s we should set burst to 25k
#       (10 is really 12.5k despite the quoted math above).
#
if [ -z "$UP_BURST" ]; then
    UP_BURST=25k
fi

# check for mistakes
if [ $(($UP_HIGH_GUARANTEED_RATE_KBIT+$UP_MEDIUM_GUARANTEED_RATE_KBIT+$UP_LOW_GUARANTEED_RATE_KBIT)) -gt $UP_KBIT ]; then
    echo "Sum of GUARANTEED rates exceeds UP_MBIT"
    exit 1
fi

# clear out old config
tc qdisc del dev $DEV root >/dev/null 2>&1
tc qdisc del dev $DEV ingres >/dev/null 2>&1


#### uplink ###################################################################
#
# This line sets a HTB qdisc on the root of $DEV, and it specifies that the
# class 1:20 is used by default. It sets the name of the root as 1:, for future
# references.
tc qdisc add dev $DEV root handle 1: htb default 20

# This creates a class called 1:1, which is direct descendant of root (the
# parent is 1:), this class gets assigned also an HTB qdisc, and then it sets a
# max GUARANTEED rate to our specified uplink speed, with a burst of 25k
#
# NOTE: We don't specify a `ceil`, so it defaults to the `rate` value (i.e.,
#       there will be no bursting above `rate` allowed).
#
# NOTE: The `burst` value should be at least as high as the highest `burst` of
#       its children (even though 1:1 will not have any bursting).
#
tc class add dev $DEV parent 1: classid 1:1 htb rate ${UP_KBIT}kbit \
   burst $UP_BURST

# The previous class has these branches:

# Class 1:10, which is our HIGH priority class
tc class add dev $DEV parent 1:1 classid 1:10 htb \
   rate ${UP_HIGH_GUARANTEED_RATE_KBIT}kbit ceil ${UP_KBIT}kbit \
   burst $UP_BURST prio 1

# Class 1:20, which is our MEDIUM priority class
tc class add dev $DEV parent 1:1 classid 1:20 htb \
   rate ${UP_MEDIUM_GUARANTEED_RATE_KBIT}kbit ceil ${UP_KBIT}kbit \
   burst $UP_BURST prio 2

# Class 1:30, which is our LOW priority class (as in, where packets go to die)
tc class add dev $DEV parent 1:1 classid 1:30 htb \
   rate ${UP_LOW_GUARANTEED_RATE_KBIT}kbit ceil ${UP_KBIT}kbit \
   burst $UP_BURST prio 3

# Martin Devera, author of HTB, then recommends SFQ for beneath these classes:
tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
tc qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10


# Now, lets filter important stuff into the HIGH priority class
#
# Interactive Traffic - Minimize Delay (MD), Minimize Monetary Cost (MMC) + MD,
# Maximize Riliability (MR) + MD, and MMC+MR+MD.  See tc-prio(8) for details.
#
# NOTE: We do this using the meta(priority) field to make the rule easier.
#
# FIXME: This *should* catch ssh, telnet, etc, but NOT sftp, scp, or rsync
#        transfers...  need to double check this.
#
tc filter add dev $DEV parent 1: basic \
   match 'meta(priority eq 6)' classid 1:10

# NOTE: check /etc/protocols for protocol numbers
#
# ICMP (ip protocol 1) in the interactive class
tc filter add dev ${DEV} parent 1: protocol ip prio 11 u32 \
   match ip protocol 1 0xff flowid 1:10

# DNS (udp is protocol 17 or 0x11)
tc filter add dev ${DEV} parent 1: protocol ip prio 12 u32 \
   match ip protocol 17 0xff \
   match ip dport 53 0xffff \
   flowid 1:10

# To speed up downloads while an upload is going on, put ACK packets in the
# HIGH priority class
tc filter add dev ${DEV} parent 1: protocol ip prio 13 u32 \
   match ip protocol 6 0xff \
   match u8 0x05 0x0f at 0 \
   match u16 0x0000 0xffc0 at 2 \
   match u8 0x10 0xff at 33 \
   flowid 1:10

# Anything "marked" as "10" by iptables goes into the HIGH priority class (see
# /etc/iptables/rules.v4).
tc filter add dev $DEV protocol ip parent 1: prio 1 handle 10 fw flowid 1:10

# filter by destination port
for port in $HIGH_DSTPORT; do
    tc filter add dev $DEV parent 1: protocol ip prio 30 u32 \
       match ip protocol 0x6 0xff \
       match ip dport $port 0xffff \
       flowid 1:10
done
# filter by source port
for port in $HIGH_SRCPORT; do
    tc filter add dev $DEV parent 1: protocol ip prio 31 u32 \
       match ip protocol 0x6 0xff \
       match ip sport $port 0xffff \
       flowid 1:10
done
# filter by destination address
for addr in $HIGH_DSTADDR; do
    tc filter add dev $DEV parent 1: protocol ip prio 33 u32 \
       match ip protocol 0x6 0xff \
       match ip dst $addr \
       flowid 1:10
done
# filter by source address
for addr in $HIGH_SRCADDR; do
    tc filter add dev $DEV parent 1: protocol ip prio 32 u32 \
       match ip protocol 0x6 0xff \
       match ip src $addr \
       flowid 1:10
done


# And now doom specified low priority stuff to the LOW priority class
#
# Anything "marked" as "30" by iptables goes into the LOW priority class (see
# /etc/iptables/rules.v4).
tc filter add dev $DEV protocol ip parent 1: prio 1 handle 30 fw flowid 1:30

# filter by destination port
for port in $LOW_DSTPORT; do
    tc filter add dev $DEV parent 1: protocol ip prio 30 u32 \
       match ip protocol 0x6 0xff \
       match ip dport $port 0xffff \
       flowid 1:30
done
# filter by source port
for port in $LOW_SRCPORT; do
    tc filter add dev $DEV parent 1: protocol ip prio 31 u32 \
       match ip protocol 0x6 0xff \
       match ip sport $port 0xffff \
       flowid 1:30
done
# filter by destination address
for addr in $LOW_DSTADDR; do
    tc filter add dev $DEV parent 1: protocol ip prio 33 u32 \
       match ip protocol 0x6 0xff \
       match ip dst $addr \
       flowid 1:30
done
# filter by source address
#
# FIXME: this was a good idea... but... the source addr we have at this point
#        has already been NATed (if that's a word).  if we've got specific
#        addresses to send to the LOW priority class, we'll have to mark them
#        in iptables instead.
#
#        i mean, in addition to this... becaue who knows, maybe in some
#        scenario we'll have un-NATed hosts to control?
#
for addr in $LOW_SRCADDR; do
    tc filter add dev $DEV parent 1: protocol ip prio 32 u32 \
       match ip protocol 0x6 0xff \
       match ip src $addr \
       flowid 1:30
done


#### downlink #################################################################
#
# Slow downloads down to somewhat less than the real speed to prevent queuing
# at our ISP/modem.  Tune to see how high you can set it.  ISPs tend to have
# *huge* queues to make sure big downloads are fast.
#
# FIXME: that's a nope!  this makes the internet basically unusable... maybe
#        there's some egress shaping needed to make it work better... ?
#
#        i did see some stuff about increast burst to make things work
#        better...
#
## attach ingress policer:
#tc qdisc add dev $DEV handle ffff: ingress
#
## filter *everything* to it (0.0.0.0/0), drop everything that's coming in too
## fast:
##
## https://blog.stevedoria.net/20050906/ingress-policing-with-linux-and-tc
##
## burst was 10k, 20k makes pages almost loadable... 
#tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 \
#   match ip src 0.0.0.0/0 police rate $(($DOWN_KBIT*95/100))kbit \
#   burst 10k drop \
#   flowid :1
#
# Let's try this instead: ingress shaping via a cake egress shaper on a virtual
# interface that receives all our inbound traffic and then send it back to us?
# I think?
#
# https://www.bufferbloat.net/projects/codel/wiki/CakeRecipes/
#
# Hmm, sounded promising, but i couldn't ping 8.8.8.8 at all...
#
#ip link add name ifb4eth0 type ifb
#tc qdisc del dev $DEV ingress
#tc qdisc add dev $DEV handle ffff: ingress
#tc qdisc del dev ifb4eth0 root
#tc qdisc add dev ifb4eth0 root cake bandwidth $(($UP_KBIT*95/100))kbit besteffort
#ip link set ifb4eth0 up # important 
#tc filter add dev $DEV parent ffff:  matchall action mirred egress redirect dev ifb4eth0
