#!/bin/bash
#
# Awesome Powers - scripts & config files of pure awesomeness
#
# Copyright 2018-2024 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# Script for doing remote zfs replication.
#
# NOTE: This script currently makes use special command line options that have
#       not been merged yet into syncoid (part of the sanoid project).  A
#       branch with this feature is tracked via a git submodule at
#       $AP/subprojects/sanoid.
#
# NOTE: All output appended to logfile, which is then mailed and removed each
#       night (log rotation and mailing is not this script's responsibility).
#

# parse our config
#
# FIXME: or /scrap/awesome-powers/config/sync/zfs-replication.conf?  or simply
#        $(dirname $0)/zfs-replication.conf?  or $0.conf?
#
. $0.conf


log=$0.log
lock=$0.lock
stamp=$(date +"%Y-%m-%dT%H-%M-%S")

# FIXME: we can do better than this...
if [ "$1" = "--dry-run" ] || [ "$1" = "-n" ]; then
    dryrun="-n"
else
    dryrun=
    # when not dryrun, we redirect all output to the logfile
    exec 1>>$log
    exec 2>&1
fi

# make sure we're not already running
#
# NOTE: Under normal operation, we want to simply exit if previous run is still
#       processing.  However, the end-of-day reporting modes should wait until
#       previous invocation exits.
#
# FIXME: add a timeout?
#
if [ -n "$MODE" ]; then
    while [ -f $lock ]; do
        sleep 1
    done
else
    [ -e $lock ] && exit 0
fi

# parse common status
. $(dirname $0)/../status/status-common


# FIXME: actually, this whole concept might be a bad idea...  if i've got
#        multiple remote servers, all doing their OWN auto-snapshots, and i've
#        been syncing from server1, if i switch to server2, its snapshot aren't
#        "the same" snapshots as what's been syncing from server1...  so what
#        happens?
#
#        until proven otherwise, i'm going to assume this would be a big
#        problem.  so we should just specify a single sync source.
#
#        if i ever do get around to testing this scenario out, i'll want to do
#        it with a local machine...  testing with gandalf and merry over the
#        internet would be a bad idea.  plus, that's my fielded backup system
#        that i don't want to mess up.
#
pick_remote()
{
    # pick remote source from $servers
    server=
    best_score=99
    for x in $servers; do
        # FIXME: not really sure how to pick one...  follow srv-router2?  check for
        #        no guests?  for now, only merry is using zfs, so we just pick him.
        #
        #        how about, reachable host w/ fewest domUs.  Or first reachable
        #        w/ zero domUs.
        #
        #        ssh $x xl list | wc -l
        #
        #if [ "$x" = "merry" ]; then
        #    server=$x
        #    break
        #fi
        reachable=$(ssh $x hostname)
        if [ -z "$reachable" ]; then
            echo $x not reachable
            continue
        fi
        has_ds=$(ssh $x zfs list -Hp $remote_ds 2>/dev/null)
        if [ -z "$has_ds" ]; then
            echo $x missing ds $remote_ds
            continue
        fi
        score=$(ssh $x xl list | wc -l)
        if [ -z "$score" ]; then
            echo failed to get score for $x
            continue
        elif [ $score -eq 2 ]; then
            echo perfect score for $x
            server=$x
            return
        elif [ $score -lt $best_score ]; then
            server=$x
            best_score=$score
        fi
    done
}


do_syncoid()
{
    if [ "$recursive" = "true" -o "$recursive" = "1" -o "$recursive" = "yes" ]; then
        recursive="-r"
    else
        recursive=
    fi

    go="$syncoid --delete-target-snapshots $recursive $extra_options"

    for x in $exclude; do
        go+=" --exclude=$x"
    done
    #echo "$(dirname $local_ds) needs to exist, but not $local_ds"
    go+=" $remote_user@$server:$remote_ds $local_ds"
    echo $go
    if [ -z "$dryrun" ]; then
        eval $go || echo "ERROR: bad things happened!"
    fi
}



echo "--- START: $stamp ----------------------------------------------------"

# figure out path to syncoid
#
# FIXME: Once Pull Request 523 is merged into the official sanoid project,
#        replace this with a check in PATH and a check for the
#        --delete-target-snapshots flag and maybe get rid of the sanoid
#        submodule.
#
syncoid=$(dirname $0)/../subprojects/sanoid/syncoid
if [ ! -f $syncoid ]; then
    echo "ERROR: $syncoid not found"
    exit 1
fi
syncoid=$(realpath $syncoid)

# lock the lockfile!
#
# NOTE: This means if anything fails after this, we need to decide if we're
#       going to remove the lockfile when things go wrong.
#
touch $lock

# check for special modes
case "$MODE" in
    analyze)
        echo "Doing end of day analysis"
        failures=0
        check_log_for_pattern ERROR
        check_log_for_pattern WARN
        if [ $failures -ne 0 ]; then
            echo "!!!!"
            echo "!!!! Checks Failed: $failures"
            echo "!!!!"
        else
            echo "All checks passed.  :-)"
        fi
        ;;
    *)
        pick_remote
        if [ -z "$server" ]; then
            echo "ERROR: no suitable server found"
        else
            echo "selected server $server for replication"
            do_syncoid
        fi
esac

echo "--- END: $stamp (at $(date +"%Y-%m-%dT%H-%M-%S")) -----------------------------"
rm -f $lock
exit 0
