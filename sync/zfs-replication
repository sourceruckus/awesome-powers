#!/bin/bash
#
# script for doing remote zfs replication
#
# NOTE: All output appended to logfile, which is then mailed and removed each
#       night (log rotation and mailing is not this script's responsibility).
#

# parse our config
#
# FIXME: or /scrap/awesome-powers/config/sync/zfs-replication.conf?  or simply
#        $(dirname $0)/zfs-replication.conf?  or $0.conf?
#
. $0.conf


log=$0.log
lock=$0.lock
stamp=$(date +"%Y-%m-%dT%H-%M-%S")

# FIXME: we can do better than this...
if [ "$1" = "--dry-run" ] || [ "$1" = "-n" ]; then
    dryrun="-n"
else
    dryrun=
    # when not dryrun, we redirect all output to the logfile
    exec 1>>$log
    exec 2>&1
fi

# make sure we're not already running
[ -e $lock ] && exit 0

echo "--- START: $stamp ----------------------------------------------------"

# pick remote source from $servers
server=
for x in $servers; do
    # FIXME: not really sure how to pick one...  follow srv-router2?  check for
    #        no guests?  for now, only merry is using zfs, so we just pick him.
    if [ "$x" = "merry" ]; then
        server=$x
        break
    fi
done
if [ -z "$server" ]; then
    echo "ERROR: no server found"
    exit 1
fi
echo "selected server $server for replication"

# we lock after the remote server check so that we get output warning us that
# our servers are down (because they shouldn't be), but we don't lock until
# we're really doing work.
touch $lock


if [ "$recursive" = "true" -o "$recursive" = "1" -o "$recursive" = "yes" ]; then
    recursive="-r"
else
    recursive=
fi

go="syncoid $recursive"
for x in $exclude; do
    go+=" --exclude=$x"
done
#echo "$(dirname $local_ds) needs to exist, but not $local_ds"
go+=" $remote_user@$server:$remote_ds $local_ds"
echo $go
if [ -z "$dryrun" ]; then
    eval $go || exit 1
fi

rm -f $lock
exit 0
