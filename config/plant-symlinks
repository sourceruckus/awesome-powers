#!/bin/bash
#
# Awesome Powers - scripts & config files of pure awesomeness
#
# Copyright 2018-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# Populate a dir with symlinks to files in a template dir
#

# make sure all our variables and functions exist in subshells
set -a

# debug echo - only prints if enabled
decho()
{
    if [ -n "$opt_verbose" ]; then
        echo "$*"
    fi
}


# dry-run eval - evals unless dry-run specified
deval()
{
    if [ -z "$opt_dryrun" ]; then
        eval $*
    fi
}


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "usage: $(basename $0) [OPTIONS] TEMPLATEDIR TARGETDIR"
    echo
    echo "  -n, --dry-run         Just print what would happen."
    echo
    echo "  -v, --verbose         More descriptive output."
    echo
    echo "  -b, --backup          Create backups of existing files."
    echo
    echo "  -a, --absolute        Use absolute pathnames in symlinks."
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $(basename $0) \
    -o hnvba \
    --long help,dry-run,verbose,backup,absolute -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts

# defaults
opt_dryrun=
opt_verbose=
opt_backup=
opt_absolute=

# parse the new positional arguments
while true; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--verbose)
            opt_verbose=1
            shift
            ;;
        -n|--dry-run)
            opt_dryrun=1
            shift
            ;;
        -b|--backup)
            opt_backup=1
            shift
            ;;
        -a|--absolute)
            opt_absolute=1
            shift
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done

# check for required options
if [ $# != 2 ]; then
    usage "invalid usage"
    exit 1
fi
if [ ! -d $1 ]; then
    usage "TEMPLATEDIR doesn't exist"
    exit 1
fi

src=$(realpath $1)
dst=$(realpath $2)

decho opt_dryrun: $opt_dryrun
decho opt_verbose: $opt_verbose
decho opt_backup: $opt_backup
decho opt_absolute: $opt_absolute
decho src: $src
decho dst: $dst

echo "populating symlink forest in $2 using $1 as template"

pushd $src >/dev/null || exit 1

if [ -n "$opt_dryrun" ]; then
    mkdir="echo mkdir"
    ln="echo ln"
    realpath="echo realpath"
else
    mkdir="mkdir"
    ln="ln"
    realpath="realpath"
fi
if [ -n "$opt_verbose" ]; then
    mkdir+=" -v"
    ln+=" -v"
fi
if [ -n "$opt_backup" ]; then
    ln+=" -bS .orig"
fi

# FIXME: This was originally written to help pre-populate template dirs for new
#        hosts, in which case the realpath stuff seemed appropriate (otherwise
#        we end up committing symlinks with absolute paths to our current
#        checkout location).  However, now that we call this script directly
#        from configenator to instlal system symlinks, it doesn't seem to make
#        much sense.
#
#        Add a --absolute flag to skip the realpath stuff?
#
resolvepath()
{
    if [ -n "$2" ] && [ -z "$opt_absolute" ]; then
        realpath --relative-to=$2 -s $1
    else
        realpath -s $1
    fi
}


find . -type d -exec $mkdir -p $dst/{} \; \
     -o -exec bash -c '$ln -fs $(resolvepath $src/{} $(dirname $dst/{})) $dst/{}' \;
